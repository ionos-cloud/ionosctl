// Code generated by MockGen. DO NOT EDIT.
// Source: request.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/ionos-cloud/ionosctl/services/cloudapi-v6/resources"
)

// MockRequestsService is a mock of RequestsService interface.
type MockRequestsService struct {
	ctrl     *gomock.Controller
	recorder *MockRequestsServiceMockRecorder
}

// MockRequestsServiceMockRecorder is the mock recorder for MockRequestsService.
type MockRequestsServiceMockRecorder struct {
	mock *MockRequestsService
}

// NewMockRequestsService creates a new mock instance.
func NewMockRequestsService(ctrl *gomock.Controller) *MockRequestsService {
	mock := &MockRequestsService{ctrl: ctrl}
	mock.recorder = &MockRequestsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestsService) EXPECT() *MockRequestsServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRequestsService) Get(requestId string) (*resources.Request, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", requestId)
	ret0, _ := ret[0].(*resources.Request)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRequestsServiceMockRecorder) Get(requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequestsService)(nil).Get), requestId)
}

// GetStatus mocks base method.
func (m *MockRequestsService) GetStatus(requestId string) (*resources.RequestStatus, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", requestId)
	ret0, _ := ret[0].(*resources.RequestStatus)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockRequestsServiceMockRecorder) GetStatus(requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockRequestsService)(nil).GetStatus), requestId)
}

// List mocks base method.
func (m *MockRequestsService) List() (resources.Requests, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(resources.Requests)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRequestsServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRequestsService)(nil).List))
}

// Wait mocks base method.
func (m *MockRequestsService) Wait(requestId string) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", requestId)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockRequestsServiceMockRecorder) Wait(requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRequestsService)(nil).Wait), requestId)
}

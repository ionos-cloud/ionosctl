// Code generated by MockGen. DO NOT EDIT.
// Source: flowlog.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/ionos-cloud/ionosctl/v6/services/cloudapi-v6/resources"
)

// MockFlowLogsService is a mock of FlowLogsService interface.
type MockFlowLogsService struct {
	ctrl     *gomock.Controller
	recorder *MockFlowLogsServiceMockRecorder
}

// MockFlowLogsServiceMockRecorder is the mock recorder for MockFlowLogsService.
type MockFlowLogsServiceMockRecorder struct {
	mock *MockFlowLogsService
}

// NewMockFlowLogsService creates a new mock instance.
func NewMockFlowLogsService(ctrl *gomock.Controller) *MockFlowLogsService {
	mock := &MockFlowLogsService{ctrl: ctrl}
	mock.recorder = &MockFlowLogsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowLogsService) EXPECT() *MockFlowLogsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlowLogsService) Create(datacenterId, serverId, nicId string, input resources.FlowLog, params resources.QueryParams) (*resources.FlowLog, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", datacenterId, serverId, nicId, input, params)
	ret0, _ := ret[0].(*resources.FlowLog)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockFlowLogsServiceMockRecorder) Create(datacenterId, serverId, nicId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlowLogsService)(nil).Create), datacenterId, serverId, nicId, input, params)
}

// Delete mocks base method.
func (m *MockFlowLogsService) Delete(datacenterId, serverId, nicId, flowLogId string, params resources.QueryParams) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", datacenterId, serverId, nicId, flowLogId, params)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFlowLogsServiceMockRecorder) Delete(datacenterId, serverId, nicId, flowLogId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlowLogsService)(nil).Delete), datacenterId, serverId, nicId, flowLogId, params)
}

// Get mocks base method.
func (m *MockFlowLogsService) Get(datacenterId, serverId, nicId, flowLogId string, params resources.QueryParams) (*resources.FlowLog, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", datacenterId, serverId, nicId, flowLogId, params)
	ret0, _ := ret[0].(*resources.FlowLog)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockFlowLogsServiceMockRecorder) Get(datacenterId, serverId, nicId, flowLogId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlowLogsService)(nil).Get), datacenterId, serverId, nicId, flowLogId, params)
}

// List mocks base method.
func (m *MockFlowLogsService) List(datacenterId, serverId, nicId string, params resources.ListQueryParams) (resources.FlowLogs, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", datacenterId, serverId, nicId, params)
	ret0, _ := ret[0].(resources.FlowLogs)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFlowLogsServiceMockRecorder) List(datacenterId, serverId, nicId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFlowLogsService)(nil).List), datacenterId, serverId, nicId, params)
}

// Update mocks base method.
func (m *MockFlowLogsService) Update(datacenterId, serverId, nicId, flowlogId string, input resources.FlowLogPut, params resources.QueryParams) (*resources.FlowLog, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", datacenterId, serverId, nicId, flowlogId, input, params)
	ret0, _ := ret[0].(*resources.FlowLog)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockFlowLogsServiceMockRecorder) Update(datacenterId, serverId, nicId, flowlogId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlowLogsService)(nil).Update), datacenterId, serverId, nicId, flowlogId, input, params)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pcc.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/ionos-cloud/ionosctl/services/cloudapi-v6/resources"
)

// MockPccsService is a mock of PccsService interface.
type MockPccsService struct {
	ctrl     *gomock.Controller
	recorder *MockPccsServiceMockRecorder
}

// MockPccsServiceMockRecorder is the mock recorder for MockPccsService.
type MockPccsServiceMockRecorder struct {
	mock *MockPccsService
}

// NewMockPccsService creates a new mock instance.
func NewMockPccsService(ctrl *gomock.Controller) *MockPccsService {
	mock := &MockPccsService{ctrl: ctrl}
	mock.recorder = &MockPccsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPccsService) EXPECT() *MockPccsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPccsService) Create(u resources.PrivateCrossConnect) (*resources.PrivateCrossConnect, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", u)
	ret0, _ := ret[0].(*resources.PrivateCrossConnect)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPccsServiceMockRecorder) Create(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPccsService)(nil).Create), u)
}

// Delete mocks base method.
func (m *MockPccsService) Delete(pccId string) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", pccId)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPccsServiceMockRecorder) Delete(pccId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPccsService)(nil).Delete), pccId)
}

// Get mocks base method.
func (m *MockPccsService) Get(pccId string) (*resources.PrivateCrossConnect, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", pccId)
	ret0, _ := ret[0].(*resources.PrivateCrossConnect)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPccsServiceMockRecorder) Get(pccId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPccsService)(nil).Get), pccId)
}

// GetPeers mocks base method.
func (m *MockPccsService) GetPeers(pccId string) (*[]resources.Peer, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", pccId)
	ret0, _ := ret[0].(*[]resources.Peer)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockPccsServiceMockRecorder) GetPeers(pccId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockPccsService)(nil).GetPeers), pccId)
}

// List mocks base method.
func (m *MockPccsService) List(params resources.ListQueryParams) (resources.PrivateCrossConnects, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", params)
	ret0, _ := ret[0].(resources.PrivateCrossConnects)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPccsServiceMockRecorder) List(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPccsService)(nil).List), params)
}

// Update mocks base method.
func (m *MockPccsService) Update(pccId string, input resources.PrivateCrossConnectProperties) (*resources.PrivateCrossConnect, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", pccId, input)
	ret0, _ := ret[0].(*resources.PrivateCrossConnect)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockPccsServiceMockRecorder) Update(pccId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPccsService)(nil).Update), pccId, input)
}

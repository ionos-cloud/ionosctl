// Code generated by MockGen. DO NOT EDIT.
// Source: applicationloadbalancer.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/ionos-cloud/ionosctl/v6/services/cloudapi-v6/resources"
)

// MockApplicationLoadBalancersService is a mock of ApplicationLoadBalancersService interface.
type MockApplicationLoadBalancersService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationLoadBalancersServiceMockRecorder
}

// MockApplicationLoadBalancersServiceMockRecorder is the mock recorder for MockApplicationLoadBalancersService.
type MockApplicationLoadBalancersServiceMockRecorder struct {
	mock *MockApplicationLoadBalancersService
}

// NewMockApplicationLoadBalancersService creates a new mock instance.
func NewMockApplicationLoadBalancersService(ctrl *gomock.Controller) *MockApplicationLoadBalancersService {
	mock := &MockApplicationLoadBalancersService{ctrl: ctrl}
	mock.recorder = &MockApplicationLoadBalancersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationLoadBalancersService) EXPECT() *MockApplicationLoadBalancersServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockApplicationLoadBalancersService) Create(datacenterId string, input resources.ApplicationLoadBalancer, params resources.QueryParams) (*resources.ApplicationLoadBalancer, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", datacenterId, input, params)
	ret0, _ := ret[0].(*resources.ApplicationLoadBalancer)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) Create(datacenterId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).Create), datacenterId, input, params)
}

// CreateFlowLog mocks base method.
func (m *MockApplicationLoadBalancersService) CreateFlowLog(datacenterId, applicationLoadBalancerId string, input resources.FlowLog, params resources.QueryParams) (*resources.FlowLog, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowLog", datacenterId, applicationLoadBalancerId, input, params)
	ret0, _ := ret[0].(*resources.FlowLog)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFlowLog indicates an expected call of CreateFlowLog.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) CreateFlowLog(datacenterId, applicationLoadBalancerId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowLog", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).CreateFlowLog), datacenterId, applicationLoadBalancerId, input, params)
}

// CreateForwardingRule mocks base method.
func (m *MockApplicationLoadBalancersService) CreateForwardingRule(datacenterId, applicationLoadBalancerId string, input resources.ApplicationLoadBalancerForwardingRule, params resources.QueryParams) (*resources.ApplicationLoadBalancerForwardingRule, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForwardingRule", datacenterId, applicationLoadBalancerId, input, params)
	ret0, _ := ret[0].(*resources.ApplicationLoadBalancerForwardingRule)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateForwardingRule indicates an expected call of CreateForwardingRule.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) CreateForwardingRule(datacenterId, applicationLoadBalancerId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForwardingRule", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).CreateForwardingRule), datacenterId, applicationLoadBalancerId, input, params)
}

// Delete mocks base method.
func (m *MockApplicationLoadBalancersService) Delete(datacenterId, applicationLoadBalancerId string, params resources.QueryParams) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", datacenterId, applicationLoadBalancerId, params)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) Delete(datacenterId, applicationLoadBalancerId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).Delete), datacenterId, applicationLoadBalancerId, params)
}

// DeleteFlowLog mocks base method.
func (m *MockApplicationLoadBalancersService) DeleteFlowLog(datacenterId, applicationLoadBalancerId, flowLogId string, params resources.QueryParams) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowLog", datacenterId, applicationLoadBalancerId, flowLogId, params)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowLog indicates an expected call of DeleteFlowLog.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) DeleteFlowLog(datacenterId, applicationLoadBalancerId, flowLogId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowLog", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).DeleteFlowLog), datacenterId, applicationLoadBalancerId, flowLogId, params)
}

// DeleteForwardingRule mocks base method.
func (m *MockApplicationLoadBalancersService) DeleteForwardingRule(datacenterId, applicationLoadBalancerId, forwardingRuleId string, params resources.QueryParams) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForwardingRule", datacenterId, applicationLoadBalancerId, forwardingRuleId, params)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForwardingRule indicates an expected call of DeleteForwardingRule.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) DeleteForwardingRule(datacenterId, applicationLoadBalancerId, forwardingRuleId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForwardingRule", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).DeleteForwardingRule), datacenterId, applicationLoadBalancerId, forwardingRuleId, params)
}

// Get mocks base method.
func (m *MockApplicationLoadBalancersService) Get(datacenterId, applicationLoadBalancerId string, params resources.QueryParams) (*resources.ApplicationLoadBalancer, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", datacenterId, applicationLoadBalancerId, params)
	ret0, _ := ret[0].(*resources.ApplicationLoadBalancer)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) Get(datacenterId, applicationLoadBalancerId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).Get), datacenterId, applicationLoadBalancerId, params)
}

// GetFlowLog mocks base method.
func (m *MockApplicationLoadBalancersService) GetFlowLog(datacenterId, applicationLoadBalancerId, flowLogId string, params resources.QueryParams) (*resources.FlowLog, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowLog", datacenterId, applicationLoadBalancerId, flowLogId, params)
	ret0, _ := ret[0].(*resources.FlowLog)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFlowLog indicates an expected call of GetFlowLog.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) GetFlowLog(datacenterId, applicationLoadBalancerId, flowLogId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowLog", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).GetFlowLog), datacenterId, applicationLoadBalancerId, flowLogId, params)
}

// GetForwardingRule mocks base method.
func (m *MockApplicationLoadBalancersService) GetForwardingRule(datacenterId, applicationLoadBalancerId, forwardingRuleId string, params resources.QueryParams) (*resources.ApplicationLoadBalancerForwardingRule, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForwardingRule", datacenterId, applicationLoadBalancerId, forwardingRuleId, params)
	ret0, _ := ret[0].(*resources.ApplicationLoadBalancerForwardingRule)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetForwardingRule indicates an expected call of GetForwardingRule.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) GetForwardingRule(datacenterId, applicationLoadBalancerId, forwardingRuleId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForwardingRule", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).GetForwardingRule), datacenterId, applicationLoadBalancerId, forwardingRuleId, params)
}

// List mocks base method.
func (m *MockApplicationLoadBalancersService) List(datacenterId string, params resources.ListQueryParams) (resources.ApplicationLoadBalancers, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", datacenterId, params)
	ret0, _ := ret[0].(resources.ApplicationLoadBalancers)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) List(datacenterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).List), datacenterId, params)
}

// ListFlowLogs mocks base method.
func (m *MockApplicationLoadBalancersService) ListFlowLogs(datacenterId, applicationLoadBalancerId string, params resources.ListQueryParams) (resources.FlowLogs, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowLogs", datacenterId, applicationLoadBalancerId, params)
	ret0, _ := ret[0].(resources.FlowLogs)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFlowLogs indicates an expected call of ListFlowLogs.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) ListFlowLogs(datacenterId, applicationLoadBalancerId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowLogs", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).ListFlowLogs), datacenterId, applicationLoadBalancerId, params)
}

// ListForwardingRules mocks base method.
func (m *MockApplicationLoadBalancersService) ListForwardingRules(datacenterId, applicationLoadBalancerId string, params resources.ListQueryParams) (resources.ApplicationLoadBalancerForwardingRules, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForwardingRules", datacenterId, applicationLoadBalancerId, params)
	ret0, _ := ret[0].(resources.ApplicationLoadBalancerForwardingRules)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListForwardingRules indicates an expected call of ListForwardingRules.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) ListForwardingRules(datacenterId, applicationLoadBalancerId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForwardingRules", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).ListForwardingRules), datacenterId, applicationLoadBalancerId, params)
}

// Update mocks base method.
func (m *MockApplicationLoadBalancersService) Update(datacenterId, applicationLoadBalancerId string, input resources.ApplicationLoadBalancerProperties, params resources.QueryParams) (*resources.ApplicationLoadBalancer, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", datacenterId, applicationLoadBalancerId, input, params)
	ret0, _ := ret[0].(*resources.ApplicationLoadBalancer)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) Update(datacenterId, applicationLoadBalancerId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).Update), datacenterId, applicationLoadBalancerId, input, params)
}

// UpdateFlowLog mocks base method.
func (m *MockApplicationLoadBalancersService) UpdateFlowLog(datacenterId, applicationLoadBalancerId, flowLogId string, input *resources.FlowLogProperties, params resources.QueryParams) (*resources.FlowLog, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowLog", datacenterId, applicationLoadBalancerId, flowLogId, input, params)
	ret0, _ := ret[0].(*resources.FlowLog)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFlowLog indicates an expected call of UpdateFlowLog.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) UpdateFlowLog(datacenterId, applicationLoadBalancerId, flowLogId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowLog", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).UpdateFlowLog), datacenterId, applicationLoadBalancerId, flowLogId, input, params)
}

// UpdateForwardingRule mocks base method.
func (m *MockApplicationLoadBalancersService) UpdateForwardingRule(datacenterId, applicationLoadBalancerId, forwardingRuleId string, input *resources.ApplicationLoadBalancerForwardingRuleProperties, params resources.QueryParams) (*resources.ApplicationLoadBalancerForwardingRule, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForwardingRule", datacenterId, applicationLoadBalancerId, forwardingRuleId, input, params)
	ret0, _ := ret[0].(*resources.ApplicationLoadBalancerForwardingRule)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateForwardingRule indicates an expected call of UpdateForwardingRule.
func (mr *MockApplicationLoadBalancersServiceMockRecorder) UpdateForwardingRule(datacenterId, applicationLoadBalancerId, forwardingRuleId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForwardingRule", reflect.TypeOf((*MockApplicationLoadBalancersService)(nil).UpdateForwardingRule), datacenterId, applicationLoadBalancerId, forwardingRuleId, input, params)
}

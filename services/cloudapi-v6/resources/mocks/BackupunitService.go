// Code generated by MockGen. DO NOT EDIT.
// Source: ./backupunit.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/ionos-cloud/ionosctl/v6/services/cloudapi-v6/resources"
)

// MockBackupUnitsService is a mock of BackupUnitsService interface.
type MockBackupUnitsService struct {
	ctrl     *gomock.Controller
	recorder *MockBackupUnitsServiceMockRecorder
}

// MockBackupUnitsServiceMockRecorder is the mock recorder for MockBackupUnitsService.
type MockBackupUnitsServiceMockRecorder struct {
	mock *MockBackupUnitsService
}

// NewMockBackupUnitsService creates a new mock instance.
func NewMockBackupUnitsService(ctrl *gomock.Controller) *MockBackupUnitsService {
	mock := &MockBackupUnitsService{ctrl: ctrl}
	mock.recorder = &MockBackupUnitsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackupUnitsService) EXPECT() *MockBackupUnitsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBackupUnitsService) Create(u resources.BackupUnit, params resources.QueryParams) (*resources.BackupUnit, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", u, params)
	ret0, _ := ret[0].(*resources.BackupUnit)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockBackupUnitsServiceMockRecorder) Create(u, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBackupUnitsService)(nil).Create), u, params)
}

// Delete mocks base method.
func (m *MockBackupUnitsService) Delete(backupUnitId string, params resources.QueryParams) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", backupUnitId, params)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBackupUnitsServiceMockRecorder) Delete(backupUnitId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBackupUnitsService)(nil).Delete), backupUnitId, params)
}

// Get mocks base method.
func (m *MockBackupUnitsService) Get(backupUnitId string, params resources.QueryParams) (*resources.BackupUnit, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", backupUnitId, params)
	ret0, _ := ret[0].(*resources.BackupUnit)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockBackupUnitsServiceMockRecorder) Get(backupUnitId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBackupUnitsService)(nil).Get), backupUnitId, params)
}

// GetSsoUrl mocks base method.
func (m *MockBackupUnitsService) GetSsoUrl(backupUnitId string, params resources.QueryParams) (*resources.BackupUnitSSO, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSsoUrl", backupUnitId, params)
	ret0, _ := ret[0].(*resources.BackupUnitSSO)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSsoUrl indicates an expected call of GetSsoUrl.
func (mr *MockBackupUnitsServiceMockRecorder) GetSsoUrl(backupUnitId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSsoUrl", reflect.TypeOf((*MockBackupUnitsService)(nil).GetSsoUrl), backupUnitId, params)
}

// List mocks base method.
func (m *MockBackupUnitsService) List(params resources.ListQueryParams) (resources.BackupUnits, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", params)
	ret0, _ := ret[0].(resources.BackupUnits)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockBackupUnitsServiceMockRecorder) List(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBackupUnitsService)(nil).List), params)
}

// Update mocks base method.
func (m *MockBackupUnitsService) Update(backupUnitId string, input resources.BackupUnitProperties, params resources.QueryParams) (*resources.BackupUnit, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", backupUnitId, input, params)
	ret0, _ := ret[0].(*resources.BackupUnit)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockBackupUnitsServiceMockRecorder) Update(backupUnitId, input, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBackupUnitsService)(nil).Update), backupUnitId, input, params)
}

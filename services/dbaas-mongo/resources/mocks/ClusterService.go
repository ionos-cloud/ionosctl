// Code generated by MockGen. DO NOT EDIT.
// Source: ./cluster.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ionoscloud "github.com/ionos-cloud/sdk-go-dbaas-mongo"
)

// MockClustersService is a mock of ClustersService interface.
type MockClustersService struct {
	ctrl     *gomock.Controller
	recorder *MockClustersServiceMockRecorder
}

// MockClustersServiceMockRecorder is the mock recorder for MockClustersService.
type MockClustersServiceMockRecorder struct {
	mock *MockClustersService
}

// NewMockClustersService creates a new mock instance.
func NewMockClustersService(ctrl *gomock.Controller) *MockClustersService {
	mock := &MockClustersService{ctrl: ctrl}
	mock.recorder = &MockClustersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClustersService) EXPECT() *MockClustersServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClustersService) Create(input ionoscloud.CreateClusterRequest) (ionoscloud.ClusterResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(ionoscloud.ClusterResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockClustersServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClustersService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockClustersService) Delete(clusterId string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", clusterId)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClustersServiceMockRecorder) Delete(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClustersService)(nil).Delete), clusterId)
}

// DeleteAll mocks base method.
func (m *MockClustersService) DeleteAll(name string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", name)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockClustersServiceMockRecorder) DeleteAll(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockClustersService)(nil).DeleteAll), name)
}

// Get mocks base method.
func (m *MockClustersService) Get(clusterId string) (ionoscloud.ClusterResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", clusterId)
	ret0, _ := ret[0].(ionoscloud.ClusterResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockClustersServiceMockRecorder) Get(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClustersService)(nil).Get), clusterId)
}

// List mocks base method.
func (m *MockClustersService) List(filterName string, limit, offset *int32) (ionoscloud.ClusterList, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", filterName, limit, offset)
	ret0, _ := ret[0].(ionoscloud.ClusterList)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockClustersServiceMockRecorder) List(filterName, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClustersService)(nil).List), filterName, limit, offset)
}

// LogsList mocks base method.
func (m *MockClustersService) LogsList(clusterId string, direction *string, limit *int32, start, end *time.Time) (ionoscloud.ClusterLogs, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogsList", clusterId, direction, limit, start, end)
	ret0, _ := ret[0].(ionoscloud.ClusterLogs)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LogsList indicates an expected call of LogsList.
func (mr *MockClustersServiceMockRecorder) LogsList(clusterId, direction, limit, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogsList", reflect.TypeOf((*MockClustersService)(nil).LogsList), clusterId, direction, limit, start, end)
}

// Restore mocks base method.
func (m *MockClustersService) Restore(clusterId, snapshotId string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", clusterId, snapshotId)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockClustersServiceMockRecorder) Restore(clusterId, snapshotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockClustersService)(nil).Restore), clusterId, snapshotId)
}

// SnapshotsList mocks base method.
func (m *MockClustersService) SnapshotsList(clusterId string, limit, offset *int32) (ionoscloud.SnapshotList, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotsList", clusterId, limit, offset)
	ret0, _ := ret[0].(ionoscloud.SnapshotList)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SnapshotsList indicates an expected call of SnapshotsList.
func (mr *MockClustersServiceMockRecorder) SnapshotsList(clusterId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotsList", reflect.TypeOf((*MockClustersService)(nil).SnapshotsList), clusterId, limit, offset)
}

// Update mocks base method.
func (m *MockClustersService) Update(id string, input ionoscloud.PatchClusterRequest) (ionoscloud.ClusterResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, input)
	ret0, _ := ret[0].(ionoscloud.ClusterResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockClustersServiceMockRecorder) Update(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClustersService)(nil).Update), id, input)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./registry.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ionoscloud "github.com/ionos-cloud/sdk-go-container-registry"
)

// MockRegistriesService is a mock of RegistriesService interface.
type MockRegistriesService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistriesServiceMockRecorder
}

// MockRegistriesServiceMockRecorder is the mock recorder for MockRegistriesService.
type MockRegistriesServiceMockRecorder struct {
	mock *MockRegistriesService
}

// NewMockRegistriesService creates a new mock instance.
func NewMockRegistriesService(ctrl *gomock.Controller) *MockRegistriesService {
	mock := &MockRegistriesService{ctrl: ctrl}
	mock.recorder = &MockRegistriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistriesService) EXPECT() *MockRegistriesServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRegistriesService) Delete(id string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistriesServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistriesService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockRegistriesService) Get(id string) (ionoscloud.RegistryResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(ionoscloud.RegistryResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRegistriesServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistriesService)(nil).Get), id)
}

// List mocks base method.
func (m *MockRegistriesService) List(filterName string) (ionoscloud.RegistriesResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", filterName)
	ret0, _ := ret[0].(ionoscloud.RegistriesResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRegistriesServiceMockRecorder) List(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistriesService)(nil).List), filterName)
}

// Patch mocks base method.
func (m *MockRegistriesService) Patch(id string, input ionoscloud.PatchRegistryInput) (ionoscloud.RegistryResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", id, input)
	ret0, _ := ret[0].(ionoscloud.RegistryResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Patch indicates an expected call of Patch.
func (mr *MockRegistriesServiceMockRecorder) Patch(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRegistriesService)(nil).Patch), id, input)
}

// Post mocks base method.
func (m *MockRegistriesService) Post(input ionoscloud.PostRegistryInput) (ionoscloud.PostRegistryOutput, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", input)
	ret0, _ := ret[0].(ionoscloud.PostRegistryOutput)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockRegistriesServiceMockRecorder) Post(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRegistriesService)(nil).Post), input)
}

// Put mocks base method.
func (m *MockRegistriesService) Put(id string, input ionoscloud.PutRegistryInput) (ionoscloud.PutRegistryOutput, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", id, input)
	ret0, _ := ret[0].(ionoscloud.PutRegistryOutput)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Put indicates an expected call of Put.
func (mr *MockRegistriesServiceMockRecorder) Put(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRegistriesService)(nil).Put), id, input)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./token.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ionoscloud "github.com/ionos-cloud/sdk-go-container-registry"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenService) Delete(id, registryId string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, registryId)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenServiceMockRecorder) Delete(id, registryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenService)(nil).Delete), id, registryId)
}

// Get mocks base method.
func (m *MockTokenService) Get(id, registryId string) (ionoscloud.TokenResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id, registryId)
	ret0, _ := ret[0].(ionoscloud.TokenResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockTokenServiceMockRecorder) Get(id, registryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenService)(nil).Get), id, registryId)
}

// List mocks base method.
func (m *MockTokenService) List(registryId string) (ionoscloud.TokensResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", registryId)
	ret0, _ := ret[0].(ionoscloud.TokensResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTokenServiceMockRecorder) List(registryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTokenService)(nil).List), registryId)
}

// Patch mocks base method.
func (m *MockTokenService) Patch(id string, input ionoscloud.PatchTokenInput, registryId string) (ionoscloud.TokenResponse, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", id, input, registryId)
	ret0, _ := ret[0].(ionoscloud.TokenResponse)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Patch indicates an expected call of Patch.
func (mr *MockTokenServiceMockRecorder) Patch(id, input, registryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockTokenService)(nil).Patch), id, input, registryId)
}

// Post mocks base method.
func (m *MockTokenService) Post(input ionoscloud.PostTokenInput, registryId string) (ionoscloud.PostTokenOutput, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", input, registryId)
	ret0, _ := ret[0].(ionoscloud.PostTokenOutput)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockTokenServiceMockRecorder) Post(input, registryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockTokenService)(nil).Post), input, registryId)
}

// Put mocks base method.
func (m *MockTokenService) Put(id string, input ionoscloud.PutTokenInput, registryId string) (ionoscloud.PutTokenOutput, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", id, input, registryId)
	ret0, _ := ret[0].(ionoscloud.PutTokenOutput)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Put indicates an expected call of Put.
func (mr *MockTokenServiceMockRecorder) Put(id, input, registryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTokenService)(nil).Put), id, input, registryId)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./certificates.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ionoscloud "github.com/ionos-cloud/sdk-go-cert-manager"
)

// MockCertsService is a mock of CertsService interface.
type MockCertsService struct {
	ctrl     *gomock.Controller
	recorder *MockCertsServiceMockRecorder
}

// MockCertsServiceMockRecorder is the mock recorder for MockCertsService.
type MockCertsServiceMockRecorder struct {
	mock *MockCertsService
}

// NewMockCertsService creates a new mock instance.
func NewMockCertsService(ctrl *gomock.Controller) *MockCertsService {
	mock := &MockCertsService{ctrl: ctrl}
	mock.recorder = &MockCertsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertsService) EXPECT() *MockCertsServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCertsService) Delete(certId string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", certId)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCertsServiceMockRecorder) Delete(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertsService)(nil).Delete), certId)
}

// Get mocks base method.
func (m *MockCertsService) Get(certId string) (ionoscloud.CertificateDto, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", certId)
	ret0, _ := ret[0].(ionoscloud.CertificateDto)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCertsServiceMockRecorder) Get(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCertsService)(nil).Get), certId)
}

// GetApiVersion mocks base method.
func (m *MockCertsService) GetApiVersion() (ionoscloud.ApiInfoDto, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiVersion")
	ret0, _ := ret[0].(ionoscloud.ApiInfoDto)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApiVersion indicates an expected call of GetApiVersion.
func (mr *MockCertsServiceMockRecorder) GetApiVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiVersion", reflect.TypeOf((*MockCertsService)(nil).GetApiVersion))
}

// List mocks base method.
func (m *MockCertsService) List() (ionoscloud.CertificateCollectionDto, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(ionoscloud.CertificateCollectionDto)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCertsServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertsService)(nil).List))
}

// Patch mocks base method.
func (m *MockCertsService) Patch(certId string, input ionoscloud.CertificatePatchDto) (ionoscloud.CertificateDto, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", certId, input)
	ret0, _ := ret[0].(ionoscloud.CertificateDto)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Patch indicates an expected call of Patch.
func (mr *MockCertsServiceMockRecorder) Patch(certId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockCertsService)(nil).Patch), certId, input)
}

// Post mocks base method.
func (m *MockCertsService) Post(arg0 ionoscloud.CertificatePostDto) (ionoscloud.CertificateDto, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0)
	ret0, _ := ret[0].(ionoscloud.CertificateDto)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockCertsServiceMockRecorder) Post(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockCertsService)(nil).Post), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: firewallrule.go

// Package mock_v6 is a generated GoMock package.
package mock_v6

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v6 "github.com/ionos-cloud/ionosctl/pkg/resources/v6"
)

// MockFirewallRulesService is a mock of FirewallRulesService interface.
type MockFirewallRulesService struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallRulesServiceMockRecorder
}

// MockFirewallRulesServiceMockRecorder is the mock recorder for MockFirewallRulesService.
type MockFirewallRulesServiceMockRecorder struct {
	mock *MockFirewallRulesService
}

// NewMockFirewallRulesService creates a new mock instance.
func NewMockFirewallRulesService(ctrl *gomock.Controller) *MockFirewallRulesService {
	mock := &MockFirewallRulesService{ctrl: ctrl}
	mock.recorder = &MockFirewallRulesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallRulesService) EXPECT() *MockFirewallRulesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFirewallRulesService) Create(datacenterId, serverId, nicId string, input v6.FirewallRule) (*v6.FirewallRule, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", datacenterId, serverId, nicId, input)
	ret0, _ := ret[0].(*v6.FirewallRule)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockFirewallRulesServiceMockRecorder) Create(datacenterId, serverId, nicId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFirewallRulesService)(nil).Create), datacenterId, serverId, nicId, input)
}

// Delete mocks base method.
func (m *MockFirewallRulesService) Delete(datacenterId, serverId, nicId, firewallRuleId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", datacenterId, serverId, nicId, firewallRuleId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFirewallRulesServiceMockRecorder) Delete(datacenterId, serverId, nicId, firewallRuleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFirewallRulesService)(nil).Delete), datacenterId, serverId, nicId, firewallRuleId)
}

// Get mocks base method.
func (m *MockFirewallRulesService) Get(datacenterId, serverId, nicId, firewallRuleId string) (*v6.FirewallRule, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", datacenterId, serverId, nicId, firewallRuleId)
	ret0, _ := ret[0].(*v6.FirewallRule)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockFirewallRulesServiceMockRecorder) Get(datacenterId, serverId, nicId, firewallRuleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirewallRulesService)(nil).Get), datacenterId, serverId, nicId, firewallRuleId)
}

// List mocks base method.
func (m *MockFirewallRulesService) List(datacenterId, serverId, nicId string) (v6.FirewallRules, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", datacenterId, serverId, nicId)
	ret0, _ := ret[0].(v6.FirewallRules)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFirewallRulesServiceMockRecorder) List(datacenterId, serverId, nicId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirewallRulesService)(nil).List), datacenterId, serverId, nicId)
}

// Update mocks base method.
func (m *MockFirewallRulesService) Update(datacenterId, serverId, nicId, firewallRuleId string, input v6.FirewallRuleProperties) (*v6.FirewallRule, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", datacenterId, serverId, nicId, firewallRuleId, input)
	ret0, _ := ret[0].(*v6.FirewallRule)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockFirewallRulesServiceMockRecorder) Update(datacenterId, serverId, nicId, firewallRuleId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFirewallRulesService)(nil).Update), datacenterId, serverId, nicId, firewallRuleId, input)
}

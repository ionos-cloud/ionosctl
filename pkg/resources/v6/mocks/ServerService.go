// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_v6 is a generated GoMock package.
package mock_v6

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v6 "github.com/ionos-cloud/ionosctl/pkg/resources/v6"
)

// MockServersService is a mock of ServersService interface.
type MockServersService struct {
	ctrl     *gomock.Controller
	recorder *MockServersServiceMockRecorder
}

// MockServersServiceMockRecorder is the mock recorder for MockServersService.
type MockServersServiceMockRecorder struct {
	mock *MockServersService
}

// NewMockServersService creates a new mock instance.
func NewMockServersService(ctrl *gomock.Controller) *MockServersService {
	mock := &MockServersService{ctrl: ctrl}
	mock.recorder = &MockServersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServersService) EXPECT() *MockServersServiceMockRecorder {
	return m.recorder
}

// AttachCdrom mocks base method.
func (m *MockServersService) AttachCdrom(datacenterId, serverId, cdromId string) (*v6.Image, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachCdrom", datacenterId, serverId, cdromId)
	ret0, _ := ret[0].(*v6.Image)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AttachCdrom indicates an expected call of AttachCdrom.
func (mr *MockServersServiceMockRecorder) AttachCdrom(datacenterId, serverId, cdromId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachCdrom", reflect.TypeOf((*MockServersService)(nil).AttachCdrom), datacenterId, serverId, cdromId)
}

// AttachVolume mocks base method.
func (m *MockServersService) AttachVolume(datacenterId, serverId, volumeId string) (*v6.Volume, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolume", datacenterId, serverId, volumeId)
	ret0, _ := ret[0].(*v6.Volume)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AttachVolume indicates an expected call of AttachVolume.
func (mr *MockServersServiceMockRecorder) AttachVolume(datacenterId, serverId, volumeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolume", reflect.TypeOf((*MockServersService)(nil).AttachVolume), datacenterId, serverId, volumeId)
}

// Create mocks base method.
func (m *MockServersService) Create(datacenterId string, input v6.Server) (*v6.Server, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", datacenterId, input)
	ret0, _ := ret[0].(*v6.Server)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockServersServiceMockRecorder) Create(datacenterId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServersService)(nil).Create), datacenterId, input)
}

// Delete mocks base method.
func (m *MockServersService) Delete(datacenterId, serverId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", datacenterId, serverId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServersServiceMockRecorder) Delete(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServersService)(nil).Delete), datacenterId, serverId)
}

// DetachCdrom mocks base method.
func (m *MockServersService) DetachCdrom(datacenterId, serverId, cdromId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachCdrom", datacenterId, serverId, cdromId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachCdrom indicates an expected call of DetachCdrom.
func (mr *MockServersServiceMockRecorder) DetachCdrom(datacenterId, serverId, cdromId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachCdrom", reflect.TypeOf((*MockServersService)(nil).DetachCdrom), datacenterId, serverId, cdromId)
}

// DetachVolume mocks base method.
func (m *MockServersService) DetachVolume(datacenterId, serverId, volumeId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", datacenterId, serverId, volumeId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockServersServiceMockRecorder) DetachVolume(datacenterId, serverId, volumeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockServersService)(nil).DetachVolume), datacenterId, serverId, volumeId)
}

// Get mocks base method.
func (m *MockServersService) Get(datacenterId, serverId string) (*v6.Server, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", datacenterId, serverId)
	ret0, _ := ret[0].(*v6.Server)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockServersServiceMockRecorder) Get(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServersService)(nil).Get), datacenterId, serverId)
}

// GetCdrom mocks base method.
func (m *MockServersService) GetCdrom(datacenterId, serverId, cdromId string) (*v6.Image, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCdrom", datacenterId, serverId, cdromId)
	ret0, _ := ret[0].(*v6.Image)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCdrom indicates an expected call of GetCdrom.
func (mr *MockServersServiceMockRecorder) GetCdrom(datacenterId, serverId, cdromId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCdrom", reflect.TypeOf((*MockServersService)(nil).GetCdrom), datacenterId, serverId, cdromId)
}

// GetRemoteConsoleUrl mocks base method.
func (m *MockServersService) GetRemoteConsoleUrl(datacenterId, serverId string) (v6.RemoteConsoleUrl, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteConsoleUrl", datacenterId, serverId)
	ret0, _ := ret[0].(v6.RemoteConsoleUrl)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRemoteConsoleUrl indicates an expected call of GetRemoteConsoleUrl.
func (mr *MockServersServiceMockRecorder) GetRemoteConsoleUrl(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteConsoleUrl", reflect.TypeOf((*MockServersService)(nil).GetRemoteConsoleUrl), datacenterId, serverId)
}

// GetToken mocks base method.
func (m *MockServersService) GetToken(datacenterId, serverId string) (v6.Token, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", datacenterId, serverId)
	ret0, _ := ret[0].(v6.Token)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetToken indicates an expected call of GetToken.
func (mr *MockServersServiceMockRecorder) GetToken(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockServersService)(nil).GetToken), datacenterId, serverId)
}

// GetVolume mocks base method.
func (m *MockServersService) GetVolume(datacenterId, serverId, volumeId string) (*v6.Volume, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", datacenterId, serverId, volumeId)
	ret0, _ := ret[0].(*v6.Volume)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockServersServiceMockRecorder) GetVolume(datacenterId, serverId, volumeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockServersService)(nil).GetVolume), datacenterId, serverId, volumeId)
}

// List mocks base method.
func (m *MockServersService) List(datacenterId string) (v6.Servers, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", datacenterId)
	ret0, _ := ret[0].(v6.Servers)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServersServiceMockRecorder) List(datacenterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServersService)(nil).List), datacenterId)
}

// ListCdroms mocks base method.
func (m *MockServersService) ListCdroms(datacenterId, serverId string) (v6.Cdroms, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCdroms", datacenterId, serverId)
	ret0, _ := ret[0].(v6.Cdroms)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCdroms indicates an expected call of ListCdroms.
func (mr *MockServersServiceMockRecorder) ListCdroms(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCdroms", reflect.TypeOf((*MockServersService)(nil).ListCdroms), datacenterId, serverId)
}

// ListVolumes mocks base method.
func (m *MockServersService) ListVolumes(datacenterId, serverId string) (v6.AttachedVolumes, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", datacenterId, serverId)
	ret0, _ := ret[0].(v6.AttachedVolumes)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockServersServiceMockRecorder) ListVolumes(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockServersService)(nil).ListVolumes), datacenterId, serverId)
}

// Reboot mocks base method.
func (m *MockServersService) Reboot(datacenterId, serverId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot", datacenterId, serverId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reboot indicates an expected call of Reboot.
func (mr *MockServersServiceMockRecorder) Reboot(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockServersService)(nil).Reboot), datacenterId, serverId)
}

// Resume mocks base method.
func (m *MockServersService) Resume(datacenterId, serverId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", datacenterId, serverId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resume indicates an expected call of Resume.
func (mr *MockServersServiceMockRecorder) Resume(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockServersService)(nil).Resume), datacenterId, serverId)
}

// Start mocks base method.
func (m *MockServersService) Start(datacenterId, serverId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", datacenterId, serverId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockServersServiceMockRecorder) Start(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServersService)(nil).Start), datacenterId, serverId)
}

// Stop mocks base method.
func (m *MockServersService) Stop(datacenterId, serverId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", datacenterId, serverId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockServersServiceMockRecorder) Stop(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServersService)(nil).Stop), datacenterId, serverId)
}

// Suspend mocks base method.
func (m *MockServersService) Suspend(datacenterId, serverId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspend", datacenterId, serverId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suspend indicates an expected call of Suspend.
func (mr *MockServersServiceMockRecorder) Suspend(datacenterId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockServersService)(nil).Suspend), datacenterId, serverId)
}

// Update mocks base method.
func (m *MockServersService) Update(datacenterId, serverId string, input v6.ServerProperties) (*v6.Server, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", datacenterId, serverId, input)
	ret0, _ := ret[0].(*v6.Server)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockServersServiceMockRecorder) Update(datacenterId, serverId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServersService)(nil).Update), datacenterId, serverId, input)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: group.go

// Package mock_v6 is a generated GoMock package.
package mock_v6

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v6 "github.com/ionos-cloud/ionosctl/pkg/resources/v6"
)

// MockGroupsService is a mock of GroupsService interface.
type MockGroupsService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsServiceMockRecorder
}

// MockGroupsServiceMockRecorder is the mock recorder for MockGroupsService.
type MockGroupsServiceMockRecorder struct {
	mock *MockGroupsService
}

// NewMockGroupsService creates a new mock instance.
func NewMockGroupsService(ctrl *gomock.Controller) *MockGroupsService {
	mock := &MockGroupsService{ctrl: ctrl}
	mock.recorder = &MockGroupsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupsService) EXPECT() *MockGroupsServiceMockRecorder {
	return m.recorder
}

// AddShare mocks base method.
func (m *MockGroupsService) AddShare(groupId, resourceId string, input v6.GroupShare) (*v6.GroupShare, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShare", groupId, resourceId, input)
	ret0, _ := ret[0].(*v6.GroupShare)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddShare indicates an expected call of AddShare.
func (mr *MockGroupsServiceMockRecorder) AddShare(groupId, resourceId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShare", reflect.TypeOf((*MockGroupsService)(nil).AddShare), groupId, resourceId, input)
}

// AddUser mocks base method.
func (m *MockGroupsService) AddUser(groupId string, input v6.User) (*v6.User, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", groupId, input)
	ret0, _ := ret[0].(*v6.User)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddUser indicates an expected call of AddUser.
func (mr *MockGroupsServiceMockRecorder) AddUser(groupId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockGroupsService)(nil).AddUser), groupId, input)
}

// Create mocks base method.
func (m *MockGroupsService) Create(u v6.Group) (*v6.Group, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", u)
	ret0, _ := ret[0].(*v6.Group)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockGroupsServiceMockRecorder) Create(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupsService)(nil).Create), u)
}

// Delete mocks base method.
func (m *MockGroupsService) Delete(groupId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", groupId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupsServiceMockRecorder) Delete(groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupsService)(nil).Delete), groupId)
}

// Get mocks base method.
func (m *MockGroupsService) Get(groupId string) (*v6.Group, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", groupId)
	ret0, _ := ret[0].(*v6.Group)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGroupsServiceMockRecorder) Get(groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupsService)(nil).Get), groupId)
}

// GetShare mocks base method.
func (m *MockGroupsService) GetShare(groupId, resourceId string) (*v6.GroupShare, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShare", groupId, resourceId)
	ret0, _ := ret[0].(*v6.GroupShare)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetShare indicates an expected call of GetShare.
func (mr *MockGroupsServiceMockRecorder) GetShare(groupId, resourceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShare", reflect.TypeOf((*MockGroupsService)(nil).GetShare), groupId, resourceId)
}

// List mocks base method.
func (m *MockGroupsService) List() (v6.Groups, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(v6.Groups)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockGroupsServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGroupsService)(nil).List))
}

// ListResources mocks base method.
func (m *MockGroupsService) ListResources(groupId string) (v6.ResourceGroups, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", groupId)
	ret0, _ := ret[0].(v6.ResourceGroups)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListResources indicates an expected call of ListResources.
func (mr *MockGroupsServiceMockRecorder) ListResources(groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockGroupsService)(nil).ListResources), groupId)
}

// ListShares mocks base method.
func (m *MockGroupsService) ListShares(groupId string) (v6.GroupShares, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShares", groupId)
	ret0, _ := ret[0].(v6.GroupShares)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListShares indicates an expected call of ListShares.
func (mr *MockGroupsServiceMockRecorder) ListShares(groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShares", reflect.TypeOf((*MockGroupsService)(nil).ListShares), groupId)
}

// ListUsers mocks base method.
func (m *MockGroupsService) ListUsers(groupId string) (v6.GroupMembers, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", groupId)
	ret0, _ := ret[0].(v6.GroupMembers)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockGroupsServiceMockRecorder) ListUsers(groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockGroupsService)(nil).ListUsers), groupId)
}

// RemoveShare mocks base method.
func (m *MockGroupsService) RemoveShare(groupId, resourceId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveShare", groupId, resourceId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveShare indicates an expected call of RemoveShare.
func (mr *MockGroupsServiceMockRecorder) RemoveShare(groupId, resourceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveShare", reflect.TypeOf((*MockGroupsService)(nil).RemoveShare), groupId, resourceId)
}

// RemoveUser mocks base method.
func (m *MockGroupsService) RemoveUser(groupId, userId string) (*v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", groupId, userId)
	ret0, _ := ret[0].(*v6.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockGroupsServiceMockRecorder) RemoveUser(groupId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockGroupsService)(nil).RemoveUser), groupId, userId)
}

// Update mocks base method.
func (m *MockGroupsService) Update(groupId string, input v6.Group) (*v6.Group, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", groupId, input)
	ret0, _ := ret[0].(*v6.Group)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockGroupsServiceMockRecorder) Update(groupId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupsService)(nil).Update), groupId, input)
}

// UpdateShare mocks base method.
func (m *MockGroupsService) UpdateShare(groupId, resourceId string, input v6.GroupShare) (*v6.GroupShare, *v6.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShare", groupId, resourceId, input)
	ret0, _ := ret[0].(*v6.GroupShare)
	ret1, _ := ret[1].(*v6.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateShare indicates an expected call of UpdateShare.
func (mr *MockGroupsServiceMockRecorder) UpdateShare(groupId, resourceId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShare", reflect.TypeOf((*MockGroupsService)(nil).UpdateShare), groupId, resourceId, input)
}

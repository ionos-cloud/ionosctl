// Code generated by MockGen. DO NOT EDIT.
// Source: ipblock.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/ionos-cloud/ionosctl/pkg/resources"
)

// MockIpBlocksService is a mock of IpBlocksService interface.
type MockIpBlocksService struct {
	ctrl     *gomock.Controller
	recorder *MockIpBlocksServiceMockRecorder
}

// MockIpBlocksServiceMockRecorder is the mock recorder for MockIpBlocksService.
type MockIpBlocksServiceMockRecorder struct {
	mock *MockIpBlocksService
}

// NewMockIpBlocksService creates a new mock instance.
func NewMockIpBlocksService(ctrl *gomock.Controller) *MockIpBlocksService {
	mock := &MockIpBlocksService{ctrl: ctrl}
	mock.recorder = &MockIpBlocksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpBlocksService) EXPECT() *MockIpBlocksServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIpBlocksService) Create(name, location string, size int32) (*resources.IpBlock, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, location, size)
	ret0, _ := ret[0].(*resources.IpBlock)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIpBlocksServiceMockRecorder) Create(name, location, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIpBlocksService)(nil).Create), name, location, size)
}

// Delete mocks base method.
func (m *MockIpBlocksService) Delete(ipBlockId string) (*resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ipBlockId)
	ret0, _ := ret[0].(*resources.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIpBlocksServiceMockRecorder) Delete(ipBlockId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIpBlocksService)(nil).Delete), ipBlockId)
}

// Get mocks base method.
func (m *MockIpBlocksService) Get(IpBlockId string) (*resources.IpBlock, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", IpBlockId)
	ret0, _ := ret[0].(*resources.IpBlock)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockIpBlocksServiceMockRecorder) Get(IpBlockId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIpBlocksService)(nil).Get), IpBlockId)
}

// List mocks base method.
func (m *MockIpBlocksService) List() (resources.IpBlocks, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(resources.IpBlocks)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIpBlocksServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIpBlocksService)(nil).List))
}

// Update mocks base method.
func (m *MockIpBlocksService) Update(ipBlockId string, input resources.IpBlockProperties) (*resources.IpBlock, *resources.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ipBlockId, input)
	ret0, _ := ret[0].(*resources.IpBlock)
	ret1, _ := ret[1].(*resources.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockIpBlocksServiceMockRecorder) Update(ipBlockId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIpBlocksService)(nil).Update), ipBlockId, input)
}

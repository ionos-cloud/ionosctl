/*
 * CLOUD API
 *
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 6.0-SDK.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// ApplicationLoadBalancerForwardingRuleHealthCheck struct for ApplicationLoadBalancerForwardingRuleHealthCheck
type ApplicationLoadBalancerForwardingRuleHealthCheck struct {
	// ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
	ClientTimeout *int32 `json:"clientTimeout,omitempty"`
}



// GetClientTimeout returns the ClientTimeout field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ApplicationLoadBalancerForwardingRuleHealthCheck) GetClientTimeout() *int32 {
	if o == nil {
		return nil
	}


	return o.ClientTimeout

}

// GetClientTimeoutOk returns a tuple with the ClientTimeout field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationLoadBalancerForwardingRuleHealthCheck) GetClientTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}


	return o.ClientTimeout, true
}

// SetClientTimeout sets field value
func (o *ApplicationLoadBalancerForwardingRuleHealthCheck) SetClientTimeout(v int32) {


	o.ClientTimeout = &v

}

// HasClientTimeout returns a boolean if a field has been set.
func (o *ApplicationLoadBalancerForwardingRuleHealthCheck) HasClientTimeout() bool {
	if o != nil && o.ClientTimeout != nil {
		return true
	}

	return false
}


func (o ApplicationLoadBalancerForwardingRuleHealthCheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ClientTimeout != nil {
		toSerialize["clientTimeout"] = o.ClientTimeout
	}
	
	return json.Marshal(toSerialize)
}

type NullableApplicationLoadBalancerForwardingRuleHealthCheck struct {
	value *ApplicationLoadBalancerForwardingRuleHealthCheck
	isSet bool
}

func (v NullableApplicationLoadBalancerForwardingRuleHealthCheck) Get() *ApplicationLoadBalancerForwardingRuleHealthCheck {
	return v.value
}

func (v *NullableApplicationLoadBalancerForwardingRuleHealthCheck) Set(val *ApplicationLoadBalancerForwardingRuleHealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationLoadBalancerForwardingRuleHealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationLoadBalancerForwardingRuleHealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationLoadBalancerForwardingRuleHealthCheck(val *ApplicationLoadBalancerForwardingRuleHealthCheck) *NullableApplicationLoadBalancerForwardingRuleHealthCheck {
	return &NullableApplicationLoadBalancerForwardingRuleHealthCheck{value: val, isSet: true}
}

func (v NullableApplicationLoadBalancerForwardingRuleHealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationLoadBalancerForwardingRuleHealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



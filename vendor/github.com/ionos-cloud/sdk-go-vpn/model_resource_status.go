/*
 * VPN Gateways
 *
 * POC Docs for VPN gateway as service
 *
 * API version: 0.0.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// ResourceStatus The current status of the resource.
type ResourceStatus struct {
	// The current status of the resource. The status can be:  * `AVAILABLE` - resource exists and is healthy. * `PROVISIONING` - resource is being created or updated. * `DESTROYING` - delete command was issued, the resource is being deleted. * `FAILED`: - resource failed, details in `statusMessage`.
	Status *string `json:"status"`
	// The message of the failure if the status is `FAILED`.
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// NewResourceStatus instantiates a new ResourceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceStatus(status string) *ResourceStatus {
	this := ResourceStatus{}

	this.Status = &status

	return &this
}

// NewResourceStatusWithDefaults instantiates a new ResourceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceStatusWithDefaults() *ResourceStatus {
	this := ResourceStatus{}
	return &this
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResourceStatus) GetStatus() *string {
	if o == nil {
		return nil
	}

	return o.Status

}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Status, true
}

// SetStatus sets field value
func (o *ResourceStatus) SetStatus(v string) {

	o.Status = &v

}

// HasStatus returns a boolean if a field has been set.
func (o *ResourceStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// GetStatusMessage returns the StatusMessage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResourceStatus) GetStatusMessage() *string {
	if o == nil {
		return nil
	}

	return o.StatusMessage

}

// GetStatusMessageOk returns a tuple with the StatusMessage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceStatus) GetStatusMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.StatusMessage, true
}

// SetStatusMessage sets field value
func (o *ResourceStatus) SetStatusMessage(v string) {

	o.StatusMessage = &v

}

// HasStatusMessage returns a boolean if a field has been set.
func (o *ResourceStatus) HasStatusMessage() bool {
	if o != nil && o.StatusMessage != nil {
		return true
	}

	return false
}

func (o ResourceStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}

	if o.StatusMessage != nil {
		toSerialize["statusMessage"] = o.StatusMessage
	}

	return json.Marshal(toSerialize)
}

type NullableResourceStatus struct {
	value *ResourceStatus
	isSet bool
}

func (v NullableResourceStatus) Get() *ResourceStatus {
	return v.value
}

func (v *NullableResourceStatus) Set(val *ResourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceStatus(val *ResourceStatus) *NullableResourceStatus {
	return &NullableResourceStatus{value: val, isSet: true}
}

func (v NullableResourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

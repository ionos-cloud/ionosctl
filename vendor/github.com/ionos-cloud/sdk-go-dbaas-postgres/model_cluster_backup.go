/*
 * IONOS DBaaS REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.0.1
 * Contact: dbaas-dev@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// ClusterBackup a backup object
type ClusterBackup struct {
	// The unique ID of the resource.
	Id *string `json:"id,omitempty"`
	// The unique ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`
	// The friendly name of your cluster.
	DisplayName *string `json:"displayName,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterBackup) GetId() *string {
	if o == nil {
		return nil
	}

	return o.Id

}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterBackup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Id, true
}

// SetId sets field value
func (o *ClusterBackup) SetId(v string) {

	o.Id = &v

}

// HasId returns a boolean if a field has been set.
func (o *ClusterBackup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// GetClusterId returns the ClusterId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterBackup) GetClusterId() *string {
	if o == nil {
		return nil
	}

	return o.ClusterId

}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterBackup) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.ClusterId, true
}

// SetClusterId sets field value
func (o *ClusterBackup) SetClusterId(v string) {

	o.ClusterId = &v

}

// HasClusterId returns a boolean if a field has been set.
func (o *ClusterBackup) HasClusterId() bool {
	if o != nil && o.ClusterId != nil {
		return true
	}

	return false
}

// GetDisplayName returns the DisplayName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterBackup) GetDisplayName() *string {
	if o == nil {
		return nil
	}

	return o.DisplayName

}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterBackup) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ClusterBackup) SetDisplayName(v string) {

	o.DisplayName = &v

}

// HasDisplayName returns a boolean if a field has been set.
func (o *ClusterBackup) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterBackup) GetType() *string {
	if o == nil {
		return nil
	}

	return o.Type

}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterBackup) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Type, true
}

// SetType sets field value
func (o *ClusterBackup) SetType(v string) {

	o.Type = &v

}

// HasType returns a boolean if a field has been set.
func (o *ClusterBackup) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

func (o ClusterBackup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Id != nil {
		toSerialize["id"] = o.Id
	}

	if o.ClusterId != nil {
		toSerialize["clusterId"] = o.ClusterId
	}

	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}

	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	return json.Marshal(toSerialize)
}

type NullableClusterBackup struct {
	value *ClusterBackup
	isSet bool
}

func (v NullableClusterBackup) Get() *ClusterBackup {
	return v.value
}

func (v *NullableClusterBackup) Set(val *ClusterBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterBackup(val *ClusterBackup) *NullableClusterBackup {
	return &NullableClusterBackup{value: val, isSet: true}
}

func (v NullableClusterBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

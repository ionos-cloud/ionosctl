/*
 * IONOS Cloud - Monitoring REST API
 *
 * The monitoring service offers a centralized platform to collect and store metrics.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the CentralMonitoring type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralMonitoring{}

// CentralMonitoring Central monitoring is a feature that allows you to use other products to send metrics to a central location. This is useful for analyzing metrics from multiple sources.
type CentralMonitoring struct {
	Enabled bool `json:"enabled"`
}

// NewCentralMonitoring instantiates a new CentralMonitoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralMonitoring(enabled bool) *CentralMonitoring {
	this := CentralMonitoring{}

	this.Enabled = enabled

	return &this
}

// NewCentralMonitoringWithDefaults instantiates a new CentralMonitoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralMonitoringWithDefaults() *CentralMonitoring {
	this := CentralMonitoring{}
	var enabled bool = false
	this.Enabled = enabled
	return &this
}

// GetEnabled returns the Enabled field value
func (o *CentralMonitoring) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CentralMonitoring) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CentralMonitoring) SetEnabled(v bool) {
	o.Enabled = v
}

func (o CentralMonitoring) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralMonitoring) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableCentralMonitoring struct {
	value *CentralMonitoring
	isSet bool
}

func (v NullableCentralMonitoring) Get() *CentralMonitoring {
	return v.value
}

func (v *NullableCentralMonitoring) Set(val *CentralMonitoring) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralMonitoring) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralMonitoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralMonitoring(val *CentralMonitoring) *NullableCentralMonitoring {
	return &NullableCentralMonitoring{value: val, isSet: true}
}

func (v NullableCentralMonitoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralMonitoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

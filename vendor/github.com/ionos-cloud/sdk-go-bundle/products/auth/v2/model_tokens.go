/*
 * Auth API
 *
 * Use the Auth API to manage tokens for secure access to IONOS Cloud APIs (Auth API, Cloud API, Reseller API, Activity Log API, and others).
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"encoding/json"
)

// checks if the Tokens type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tokens{}

// Tokens struct for Tokens
type Tokens struct {
	// Array of items in that collection.
	Tokens []Token `json:"tokens,omitempty"`
}

// NewTokens instantiates a new Tokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokens() *Tokens {
	this := Tokens{}

	return &this
}

// NewTokensWithDefaults instantiates a new Tokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokensWithDefaults() *Tokens {
	this := Tokens{}
	return &this
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *Tokens) GetTokens() []Token {
	if o == nil || IsNil(o.Tokens) {
		var ret []Token
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tokens) GetTokensOk() ([]Token, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *Tokens) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []Token and assigns it to the Tokens field.
func (o *Tokens) SetTokens(v []Token) {
	o.Tokens = v
}

func (o Tokens) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	return toSerialize, nil
}

type NullableTokens struct {
	value *Tokens
	isSet bool
}

func (v NullableTokens) Get() *Tokens {
	return v.value
}

func (v *NullableTokens) Set(val *Tokens) {
	v.value = val
	v.isSet = true
}

func (v NullableTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokens(val *Tokens) *NullableTokens {
	return &NullableTokens{value: val, isSet: true}
}

func (v NullableTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

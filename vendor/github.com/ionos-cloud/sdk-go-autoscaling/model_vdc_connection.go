/*
 * IONOS DBaaS REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional databse clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.0.1-SDK.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// VDCConnection The VDC to connect to your cluster.
type VDCConnection struct {
	VdcId *string `json:"vdc_id"`
	LanId *string `json:"lan_id"`
	// The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18 10.233.0.0/18 10.233.114.0/24
	IpAddress *string `json:"ip_address"`
}

// GetVdcId returns the VdcId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VDCConnection) GetVdcId() *string {
	if o == nil {
		return nil
	}

	return o.VdcId

}

// GetVdcIdOk returns a tuple with the VdcId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDCConnection) GetVdcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.VdcId, true
}

// SetVdcId sets field value
func (o *VDCConnection) SetVdcId(v string) {

	o.VdcId = &v

}

// HasVdcId returns a boolean if a field has been set.
func (o *VDCConnection) HasVdcId() bool {
	if o != nil && o.VdcId != nil {
		return true
	}

	return false
}

// GetLanId returns the LanId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VDCConnection) GetLanId() *string {
	if o == nil {
		return nil
	}

	return o.LanId

}

// GetLanIdOk returns a tuple with the LanId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDCConnection) GetLanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.LanId, true
}

// SetLanId sets field value
func (o *VDCConnection) SetLanId(v string) {

	o.LanId = &v

}

// HasLanId returns a boolean if a field has been set.
func (o *VDCConnection) HasLanId() bool {
	if o != nil && o.LanId != nil {
		return true
	}

	return false
}

// GetIpAddress returns the IpAddress field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VDCConnection) GetIpAddress() *string {
	if o == nil {
		return nil
	}

	return o.IpAddress

}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDCConnection) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.IpAddress, true
}

// SetIpAddress sets field value
func (o *VDCConnection) SetIpAddress(v string) {

	o.IpAddress = &v

}

// HasIpAddress returns a boolean if a field has been set.
func (o *VDCConnection) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

func (o VDCConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.VdcId != nil {
		toSerialize["vdc_id"] = o.VdcId
	}

	if o.LanId != nil {
		toSerialize["lan_id"] = o.LanId
	}

	if o.IpAddress != nil {
		toSerialize["ip_address"] = o.IpAddress
	}

	return json.Marshal(toSerialize)
}

type NullableVDCConnection struct {
	value *VDCConnection
	isSet bool
}

func (v NullableVDCConnection) Get() *VDCConnection {
	return v.value
}

func (v *NullableVDCConnection) Set(val *VDCConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableVDCConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableVDCConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDCConnection(val *VDCConnection) *NullableVDCConnection {
	return &NullableVDCConnection{value: val, isSet: true}
}

func (v NullableVDCConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDCConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
